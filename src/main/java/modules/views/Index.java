/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package modules.views;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;
import modules.game.Client;

public class Index extends javax.swing.JFrame {
    private static Index instance;
    private String logo = "/resources/index.png"; 
    
    private Index() {
        initComponents();
        setLocationRelativeTo(null);
        setImageLabel(FondoLabel, "/resources/bg.jpg");
        
        
        ImageIcon logoIcon = new ImageIcon(getClass().getResource(logo));
        if (logoIcon.getIconWidth() == -1) {
            System.err.println("Error: No se puede cargar la imagen desde la ruta: " + logo);
        } else {
            // Obtener las dimensiones originales de la imagen
            int originalWidth = logoIcon.getIconWidth();
            int originalHeight = logoIcon.getIconHeight();
            
            int newWidth = 450; 
            int newHeight = (int) ((double) originalHeight / originalWidth * newWidth); // Calcular la altura manteniendo la relación

            // Redimensionar la imagen
            Image logoImage = logoIcon.getImage().getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            JLabel logoLabel = new JLabel(new ImageIcon(logoImage)); // Crear el JLabel con la imagen redimensionada

            // Establecer la posición del logo
            logoLabel.setBounds(30, 60, newWidth, newHeight); // Usar las nuevas dimensiones

            // Añadir el logo sobre el FondoLabel
            FondoLabel.add(logoLabel);
        }


        // Refrescar la interfaz
        revalidate(); // Refresca el diseño
        repaint(); // Repinta la ventana
    }
    
     
    public static Index getInstanceIndex () {
        if (instance == null) {
            instance = new Index();
        }
        return instance;
    }
    
    private void setImageLabel(JLabel label, String root) {
        ImageIcon imageIcon = new ImageIcon(getClass().getResource(root));

        if (imageIcon.getIconWidth() == -1) {
            System.err.println("Error: la imagen no se pudo cargar desde la ruta: " + root);
        } else {

            // Escalar la imagen al tamaño del JLabel
            Image image = imageIcon.getImage();
            Image scaledImage = image.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);

            Icon icon = new ImageIcon(scaledImage);
            label.setIcon(icon);
            label.repaint(); // Repinta el JLabel para mostrar la nueva imagen
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BtnStartGame = new javax.swing.JButton();
        comboBoxDifficulty = new javax.swing.JComboBox<>();
        FondoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Index"); // NOI18N
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnStartGame.setBackground(new java.awt.Color(102, 102, 102));
        BtnStartGame.setFont(new java.awt.Font("Chiller", 3, 48)); // NOI18N
        BtnStartGame.setForeground(new java.awt.Color(255, 255, 255));
        BtnStartGame.setText("Start\n");
        BtnStartGame.setBorder(null);
        BtnStartGame.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnStartGame.setEnabled(false);
        BtnStartGame.setFocusable(false);
        BtnStartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnStartGameActionPerformed(evt);
            }
        });
        getContentPane().add(BtnStartGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 350, 180, 40));

        comboBoxDifficulty.setBackground(new java.awt.Color(255, 102, 51));
        comboBoxDifficulty.setFont(new java.awt.Font("Chiller", 3, 24)); // NOI18N
        comboBoxDifficulty.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxDifficulty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT MODE", "EASY", "NORMAL", "HARD" }));
        comboBoxDifficulty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDifficultyActionPerformed(evt);
            }
        });
        getContentPane().add(comboBoxDifficulty, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 280, 180, 40));
        getContentPane().add(FondoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void BtnStartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnStartGameActionPerformed
        String selectedDifficulty = (String) comboBoxDifficulty.getSelectedItem();        
        Client socketClient = Client.getInstanceClient();
        socketClient.connect();
        String jsonResponse = socketClient.sendMessageInitGame(selectedDifficulty);
        String board[][] = Client.getInstanceClient().getBoardJSON(jsonResponse);
        
        if (board!= null) {
            Game.getInstanceGame(board);
            this.setVisible(false);
        }    
    }//GEN-LAST:event_BtnStartGameActionPerformed

    private void comboBoxDifficultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDifficultyActionPerformed
        // TODO add your handling code here:

        String selectedDifficulty = (String) comboBoxDifficulty.getSelectedItem();
        if (selectedDifficulty != null && !selectedDifficulty.isEmpty() && !selectedDifficulty.contains("Selected Mode"))
        BtnStartGame.setEnabled(true); // Habilitar el botón
        else
        BtnStartGame.setEnabled(false); // Deshabilitar el botón si no hay selección

    }//GEN-LAST:event_comboBoxDifficultyActionPerformed
    
    /* Método para obtener el tablero que viene en la response del servidor */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnStartGame;
    private javax.swing.JLabel FondoLabel;
    private javax.swing.JComboBox<String> comboBoxDifficulty;
    // End of variables declaration//GEN-END:variables
}
