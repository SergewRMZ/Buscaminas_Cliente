package modules.views;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import modules.views.components.CustomButton;

public class Game extends javax.swing.JFrame {
    private static Game instanceGame;
    private String[][] board;
    private JButton[][] buttons;
    private int rows;
    private int cols;

	private String Bomba = "/resources/bomba.png";
    private String Abierta = "/resources/abierta.png";
    
    private Game(String[][] board) {
        this.board = board;
        this.rows = board.length;
        this.cols = board[0].length;
        createGame();
        setLocationRelativeTo(null);
        setVisible(true);
    }
        
    public static Game getInstanceGame (String[][] board) {
        if (instanceGame == null) {
            instanceGame = new Game(board);
        }
        
        return instanceGame;
    }
    
    private class BoardPanel extends JPanel {
        private Image backgroundImg;
        
        public BoardPanel(String imagePath) {
            this.backgroundImg = new ImageIcon(getClass().getResource(imagePath)).getImage();
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(this.backgroundImg, 0, 0, getWidth(), getHeight(), this);
        }
    }
    
    private void createGame () {
        BoardPanel tablero = new BoardPanel("/resources/bg_game_easy.jpg");
        tablero.setLayout(new GridLayout(this.rows, this.cols));
        buttons = new CustomButton[rows][cols];
        String imagePath = "/resources/celda_close.png";
        for (int i = 0; i < this.rows; i++) {
            for (int j = 0; j < this.cols; j++) {
                buttons[i][j] = new CustomButton(imagePath, 100, 100);               
                int coordX = i;
                int coordY = j;
                
                buttons[i][j].addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        revealCell(coordX, coordY);
                    }
                });
                
                tablero.add(buttons[i][j]);
            }
        }
        
        tablero.revalidate();
        tablero.repaint();
        
        JPanel panelContainer = new JPanel(new BorderLayout());
        panelContainer.setBorder(new EmptyBorder(20, 20, 20, 20)); // Margin de 20
        panelContainer.add(tablero, BorderLayout.CENTER);
        panelContainer.repaint();
        
        // getContentPane().removeAll(); // Limpiar cualquier contenido previo
        add(panelContainer, BorderLayout.CENTER);
        pack(); // Ajustar tamaño ventana
        
        revalidate(); // Refrescar la interfaz gráfica
        repaint();
    }
    
    private void revealCell(int coordX, int coordY) {
        ImageIcon icon;
        if (board[coordX][coordY].equals("-1")) {
            icon = new ImageIcon(getClass().getResource(Bomba));
            System.out.println("Celda con mina en " + coordX + ", " + coordY);
        } else if (board[coordX][coordY].equals("0")) {
            icon = new ImageIcon(getClass().getResource(Abierta));
            System.out.println("Celda abierta en " + coordX + ", " + coordY);
        } else {
            //Los números
        }

          //Redimensionar imagen a la celda
        Image img = icon.getImage().getScaledInstance(buttons[coordX][coordY].getWidth(), buttons[coordX][coordY].getHeight(), Image.SCALE_SMOOTH);
        icon = new ImageIcon(img);
        buttons[coordX][coordY].setIcon(icon);

        // Desactivar el botón para que no se pueda hacer clic de nuevo
        buttons[coordX][coordY].setEnabled(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
